Aim: How do we flag down a resource?

System V IPC
POSIX

Semaphores (created by Edsger Dijkstra)

	IPC construct used to control access to a shared resource (like a file or shared memory).
	
	Essentially, a semaphore is a counter that represents how many processes can access a resource at any given time.
	
		If a semaphore has a value of 3, then it can have 3 active "users".
		
		If a semaphore has a value of 0, then it is unavailable.
		
		Mutex: Semaphore of 1
		
	Most semaphore operations are "atomic", meaning they will not be split up into multiple processor instructions.
	
	Semaphore operations:
	
		Create a semaphore
		
		Set an initial value
		
		Up(S) / V(S)
			Release the semaphore to signal you are done with its associated resource.
			
			pseudocode:
				S++
				
		Down(S) / P(S)
			Attempt to take the semaphore.
			
			If the semaphore is 0, wait for it to be available.
			
			pseudocode:
				while (S == 0)
					block
				S--
				
		Remove a semaphore
		
		
		Semaphores in C - <sys/types.h> <sys/ipc.h> <sys/sem.h>
		
			semget
			
				Create/Get access to a semaphore.
				
				This is not the same as Up(S) or Down(S), it does not modify the semaphore.
				
				Returns a semaphore descriptor or -1 (errno)
				
				semget( <KEY>, <AMOUNT>, <FLAGS> )
				
					KEY
						Unique semaphore identifier (use ftok)
						
					AMOUNT
						Semaphores are stored as sets with potentially many semaphores together. This parameter sets the number of semaphores to create/get.
						
					FLAGS
						Includes permissions for the semaphore.
						
						Combine with bitwise or
						
						IPC_CREAT: create the semaphore and set value to 0.
						
						IPC_EXCL: Fail if the semaphore already exists and IPC_CREAT is on.
